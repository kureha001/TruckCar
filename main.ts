// 同乗者から無線通知を受信したときに発生するイベントです。
// ・このイベントで、状況が"店に到着"に変わります。
// ・車を止め、見守りケータイに 到着を通知 をします。
// 以上は、一度だけ実行し2度はしません。
// 
radio.onReceivedNumber(function (receivedNumber) {
    Kitronik_Move_Motor.stop()
    // 2度目は実行しないようにします。
    if (状況 != 状況店に到着) {
        Kitronik_Move_Motor.stop()
        // 状況を "店に到着" に変更します。
        状況 = 状況店に到着
        Kitronik_Move_Motor.stop()
        basic.pause(receivedNumber * 1000)
        Ｕターンする()
    }
})
// 道路に対する車の向きを確認します。
// ・確認した結果を "まっすく" か "曲がっている" で答えます。
function 車の向きを確認する () {
    // 左側のセンサーの値を得ます。
    // ※自動車の種類によって、値の求め方が違います。
    // 　・SwitchEducation製："アナログ値を読み取る端子[P1]"から求めます。
    // 　・Kitronics製：専用ブロック "[Left] linefollowing sensor value" から求めます。
    センサー道路用の値左 = Kitronik_Move_Motor.readSensor(Kitronik_Move_Motor.LfSensor.Left)
    // 右側のセンサーの値を得ます。
    // ※自動車の種類によって、値の求め方が違います。
    // 　・SwitchEducation製："アナログ値を読み取る端子[P0]"から求めます。
    // 　・Kitronics製：専用ブロック "[Right] linefollowing sensor value" から求めます。
    センサー道路用の値右 = Kitronik_Move_Motor.readSensor(Kitronik_Move_Motor.LfSensor.Right)
    // 左右のセンサーの差を得ます。
    センサー道路用の値差分 = Math.abs(センサー道路用の値左 - センサー道路用の値右)
    // ・差分がある範囲を超えると、左右のどちらかに
    // 　曲がっていると判定します。
    // ・超えていなければ、まっすぐと判定します。　　　　　　　　
    // 差分の値が、決めた範囲を超えていないときの条件判断です。
    if (センサー道路用の値差分 < センサー道路用_直進とみなす差の閾値) {
        // 車の向きが”まっすぐ”と答えます。
        return 車の向きまっすぐ
    } else {
        // 車の向きが”まがっている”と答えます。
        return 車の向き曲がっている
    }
}
// 無線機に関する調整をします。
function 準備する車用_無線機を調整する () {
    // 最初に設定する、Bluetooth無線のグループIDを決めます。
    // 変数なので実際には、今設定している内容のコピーになります。
    // ※実際の設定は次の行になります。
    // 車、同乗者、見守りケータイの3者は、同じIDである必要があります。
    無線のグループ = 1
    // 上の行で決めたグループIDで実際に設定します。
    radio.setGroup(無線のグループ)
    準備段階を表示する(1)
}
// モーターを回します。
// ・左右ごとに出力を”速い” か ”遅い” で指定します。
// ※自動車の種類によって、ブロックが違います。
// 　・SwitchEducation製：”アナログで出力する端子[13/15]"を使います。
// 　・Kitronics製：専用ブロック "[Left/Right] motor on direction [Forward] speed" を使います。
function モーターを回す (左側: number, 右側: number) {
    Kitronik_Move_Motor.motorOn(Kitronik_Move_Motor.Motors.MotorLeft, Kitronik_Move_Motor.MotorDirection.Forward, 左側)
    Kitronik_Move_Motor.motorOn(Kitronik_Move_Motor.Motors.MotorRight, Kitronik_Move_Motor.MotorDirection.Forward, 右側)
}
// 運転手用の準備です。
// 運転手が運転で意識する事柄を整理します。
function 準備する運転手用 () {
    // 運転手が把握すべき、状況について整理する。
    準備する運転手用_状況を整理する()
    準備段階を表示する(0)
}
// 設定の進み具合を数字と音で表現します。
function 準備段階を表示する (数値: number) {
    basic.showNumber(数値)
    if (数値 == 0) {
        music.playTone(523, music.beat(BeatFraction.Double))
        basic.pause(1000)
    } else {
        music.playTone(392, music.beat(BeatFraction.Half))
    }
    basic.pause(200)
}
// 安全運転を確認します。
// 確認した結果を "安全" か "危険" で答えます。
function 安全を確認する () {
    // 前方の障害物までの距離を測ります。
    // ※自動車の種類により、センサーの値を得る方法が違います。
    // ・SwitchEducation製："アナログ値を読み取る 端子[P2]"
    // ・Kitronic製：”measure distance”
    センサー衝突用の値 = Kitronik_Move_Motor.measure()
    // 危険な距離に近づいたかを条件判断します。
    // 　・ 危険な距離であれば、危険と返事をします。
    // 　・ そうでなければ、安全と返事をします。
    // ※自動車の種類により、センサーの値の変化が異なります。
    // 　よって、不等号の向きが逆になります。
    // 　・SwitchEducation製：
    // 　　近寄るほど、値が大きくなる。よって ”≧” とします。
    // 　・Kitronic製：
    // 　　近寄るほど、値が小さくなる。よって ”≦” とします。
    // 　　障害物を補足できないなど、遠すぎると判断すると、
    // 　　０となるので、例外処理を加えます
    if (センサー衝突用の値 == 0) {
        // "安全"と返事をします。
        return 安全確認の結果安全
    } else if (センサー衝突用の値 <= センサー衝突用_危険とみなす距離) {
        // "危険"と返事をします。
        return 安全確認の結果危険
    } else {
        // "安全"と返事をします。
        return 安全確認の結果安全
    }
}
// ・はじめの誤動作を防止する目的で、
// 　左右のモーターの動きを止めます。
// ・道の曲がり具合に合わせたモーター出力の
// 　強弱を調整します。
function 準備する車用_モーターを調整する () {
    // 道路をはみ出す際、はみ出している側のモーター出力を調整します。
    // ※自動車の種類によって、センサーの反応がちがうため、
    // 　数値を調整します。
    // 　・SwitchEducation製：500～600程度
    // 　・Kitronics製：20程度
    モーターの出力速い = 20
    // 道路をはみ出す際、はみ出していない側のモーター出力を調整します。
    // ※自動車の種類によって、センサーの反応がちがうため、
    // 　数値を調整します。
    // 　・SwitchEducation製：0
    // 　・Kitronics製：3程度
    モーターの出力遅い = 3
    準備段階を表示する(3)
}
// 道路の上を走ります。
// ・車と道路の位置関係を確認します。
// ・位置関係によって、モーターの出力を決めて、モーターを回します。
function 道路の上を走る () {
    // 車の位置を確認します。
    車の位置 = 車の位置を確認する()
    // 位置関係によって、モーターの出力を決めて、モーターを回します。
    // ・右に寄ってしまったら、右側のモーターを速く回します。
    // ・左に寄ってしまったら、左側のモーターを速く回します。
    // ・道路の真上にあるときは、どちらのモーターも早く回します。
    // 車が道路の左側に片寄っているときの条件判断です。
    // 車が道路の右側に片寄っているときの条件判断です。
    if (車の位置 == 車の位置道路より左) {
        // モーターを回します。
        // ・片寄っている側である、左側のモーターを速く回すよう指定します。
        モーターを回す(モーターの出力速い, モーターの出力遅い)
    } else if (車の位置 == 車の位置道路より右) {
        // モーターを回します。
        // ・片寄っている側である、右側のモーターを速く回すよう指定します。
        モーターを回す(モーターの出力遅い, モーターの出力速い)
    } else {
        // モーターを回します。
        // ・道路の中央なので、両方のモーターを速く回すよう指定します。
        モーターを回す(モーターの出力速い, モーターの出力速い)
    }
}
// 各種センサーに関する調整をします。
function 準備する車用_センサーを調整する () {
    // 道路を補足する為のセンサを調整をします。
    準備する車用_センサーを調整する道路用()
    // 衝突回避する為のセンサを調整をします。
    準備する車用_センサーを調整する衝突用()
    準備段階を表示する(2)
}
// 車用の準備です。
// ・各種機器の調整を行います。
function 準備する車用 () {
    // モーターに関する調整をします。
    準備する車用_モーターを調整する()
    // 各種センサーに関する調整をします。
    準備する車用_センサーを調整する()
    // 無線機に関する調整をします。
    準備する車用_無線機を調整する()
}
// 走行を開始します。
//  ① 無線グループを表示します。
//  ② 少し待ってから、状況を”走行可能”に
// 　　します。
function 走行を開始する () {
    // 少し時間を置きます。
    basic.pause(500)
    // 運転手の表情を表示します。困った顔にします。
    basic.showIcon(IconNames.Happy)
    // 再び、状っ強を "走行可能" にします。
    状況 = 状況走行可能
}
// 衝突を回避する為のセンサを調整をします。
function 準備する車用_センサーを調整する道路用 () {
    // 車の向きが、道路に対して”まっすぐ”であることを示すIDを決めます。
    車の向きまっすぐ = 0
    // 車の向きが、道路に対して”曲がっている”ことを示すIDを決めます。
    車の向き曲がっている = 1
    // 車の中心が”道路の中央”に位置することを示すIDを決めます。
    車の位置道路の中央 = 0
    // 車の中心が”道路の右側”に位置することを示すIDを決めます。
    車の位置道路より右 = 1
    // 車の中心が”道路の左側”に位置することを示すIDを決めます。
    車の位置道路より左 = 2
    // ・左右のセンサー値の差がいくつまでであれば、
    // 　車の向きをまっすぐと判断するか、その許容範囲を決めます。
    // ※自動車の種類によって、センサーの反応がちがうため、
    // 　数値を調整します。
    // 　・SwitchEducation製：20前後
    // 　・Kitronics製：15前後
    センサー道路用_直進とみなす差の閾値 = 15
}
// 衝突回避する為のセンサを調整をします。
function 準備する車用_センサーを調整する衝突用 () {
    // 下の値の単位をcmにしています。
    // ※Kitronik製の自動車専用ブロックです。
    // 　ほかの自動車には使いません。
    Kitronik_Move_Motor.setUltrasonicUnits(Kitronik_Move_Motor.Units.Centimeters)
    // 停止しなければいけない距離のセンサー値を決めます。
    // ※自動車の種類によって、値の決め方が違います。
    // 　・SwitchEducation製：
    // 　　近いほど値を大きくなります。
    // 　　10cmよりも短い距離に迫ると、誤動作します。
    // 　・Kitronics製：５(cm)程度
    // 　　値の単位はｃｍで、近いほど小さくなります。
    // 　　２cmよりも短い距離に迫ると誤動作します。
    // 　　また、遠すぎると０となるので、注意が必要です。
    // 
    センサー衝突用_危険とみなす距離 = 5
    // 安全確認の結果として、”安全”を示すIDを決めます。
    安全確認の結果安全 = 0
    // 安全確認の結果として、”危険”を示すIDを決めます。
    安全確認の結果危険 = 1
}
// 車を停止します。
// 　・状況を"走行禁止"にします。
// 　・モーターを止めます。
// 　・運転手の表情を表示します。
// 　・見守りケータイに 危険を通知します
// 　・クラクションを鳴らします。
function 停止する () {
    // 状況を"走行禁止"にします。
    状況 = 状況走行禁止
    Kitronik_Move_Motor.stop()
    // 運転手の表情を表示します。困った顔にします。
    basic.showIcon(IconNames.Surprised)
    // クラクションを鳴らします。
    music.playTone(523, music.beat(BeatFraction.Double))
}
// 車と道路の位置関係を確認します。
// ・確認した結果を "道路より左" か "道路より右" か "道路の中央" で答えます。
// 　　・道路に対する車の向きを確認します。
// 　　・確認の結果によって条件判断します。
// 　　・車の向きが "まっすぐ" のときは、"道路の中央" と答えます。
// 　　・車の向きが "まっすぐ" ではないときは、センサーの反応が大きい方に片寄って
// 　　　いると答えます。これは、道路から外れた白色のほうが反応が大きくなり、
// 　　　黒いほど反応は小さくなるためです。
// 　　　　・左のセンサーの反応が大きい場合は "道路より左" と答えます。
// 　　　　・右のセンサーの反応が大きい場合は "道路より右" と答えます。
function 車の位置を確認する () {
    // ・車の向きを確認し、車の向きが "まっすぐ" のときは、"道路の中央" と答えます。
    // ・そうではない時は、左右のセンサーの反応を比較し、
    // 　左右どちらに片寄っているかを答えます。
    // 道路の向きを確認します。
    // 確認し結果が、"まっすぐ"のときの条件判断になります。
    if (車の向きを確認する() == 車の向きまっすぐ) {
        // "道路の通王" と 答えます。
        return 車の位置道路の中央
    } else {
        // 左右のセンサーの反応を比較し、
        // 左右どちらに片寄っているかを答えます。
        // 左側に片寄っているときの条件判断です。
        if (センサー道路用の値左 > センサー道路用の値右) {
            // "道路より左"と答えます。
            return 車の位置道路より左
        } else {
            // "道路より右"と答えます。
            return 車の位置道路より右
        }
    }
}
function Ｕターンする () {
    basic.pause(1000)
    Kitronik_Move_Motor.spin(Kitronik_Move_Motor.SpinDirections.Left, 30)
    basic.pause(690)
    Kitronik_Move_Motor.stop()
    basic.pause(500)
    走行を開始する()
}
// 車を一時停止します。
// 　・停止します。
// 　・再び走り出します。
function 一時停止する () {
    // 車を停止します。
    停止する()
    // 走行を開始します。
    走行を開始する()
}
// 運転手が把握すべき、状況について整理する。
function 準備する運転手用_状況を整理する () {
    // 状況のうち、”出発可能”を示すIDを決めます。
    // この状況は、準備が終わった段階で、まだそう今日可能にはなっていません。
    状況出発可能 = 0
    // 状況のうち、”走行可能”を示すIDを決めます。
    // この状況でないと、安全確認や、見守りケータイとの通信、店発見を通知される、といったことが出来なくなります。
    // はじめてこの状況になるのは、無線グループ版番号をABボタンで設定した直後になります。
    状況走行可能 = 1
    // 状況のうち、”走行禁止”を示すIDを決めます。
    // この状態は、停止した時になります。
    // 一時停止なので、暫くすると再び”走行可能”に戻ります。
    状況走行禁止 = 2
    // 状況のうち、”店に到着”を示すIDを決めます。
    // この状況は、店の発見を通知されたときになります。
    // 同乗者は繰り返し、店の発見を通知しますが、運転手は一度しか反応しません。
    // 一度、到着を受け取り見守りケータイに通知すると、以上は繰り返し通知しません。
    状況店に到着 = 3
    // 最初の状況を”出発可能”にします。
    状況 = 状況出発可能
}
// 最初に一度だけ発生イベントです。
// 準備は、車と運転者の2種類の機能を設けます。
let 状況出発可能 = 0
let 状況走行禁止 = 0
let 車の位置道路の中央 = 0
let 状況走行可能 = 0
let 車の位置道路より右 = 0
let 車の位置道路より左 = 0
let 車の位置 = 0
let モーターの出力遅い = 0
let モーターの出力速い = 0
let 安全確認の結果危険 = 0
let 安全確認の結果安全 = 0
let センサー衝突用_危険とみなす距離 = 0
let センサー衝突用の値 = 0
let 無線のグループ = 0
let 車の向き曲がっている = 0
let 車の向きまっすぐ = 0
let センサー道路用_直進とみなす差の閾値 = 0
let センサー道路用の値差分 = 0
let センサー道路用の値右 = 0
let センサー道路用の値左 = 0
let 状況店に到着 = 0
let 状況 = 0
// 車用の準備です。
// 各種機器の調整を行います。
準備する車用()
// 運転手用の準備です。
// 運転手が運転で意識する事柄を整理します。
準備する運転手用()
走行を開始する()
// 運転中、繰り返し発生するイベントです。
// ・店に到着するまで、繰り返し行われます。
// ・安全確認をしながら、停止するか、進むかを選択します。
// 以上の内容は、状況が”走行可能”な場合にのみ、実行します。
basic.forever(function () {
    // 状況が"走行可能"の場合に、運転をおこないます。
    // "走行可能"以外の状況では、ここで行う運転をしません。
    if (状況 == 状況走行可能) {
        // 安全確認します。
        // 確認した結果により、条件判断します。
        // 　① 危険があれば、一時停止します。
        // 　② 安全であれば、道路の上を走ります。
        // 安全運転を確認します。
        // 確認した結果により、条件判断します。
        if (安全を確認する() == 安全確認の結果危険) {
            // 車を一時停止します。
            一時停止する()
        } else {
            // 道路の上を走ります。
            道路の上を走る()
        }
    }
})
